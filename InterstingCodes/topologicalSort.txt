//topological sort for a complete bfs based


#include<bits/stdc++.h>
using namespace std;
int ans=0;//no cycle
void addedge(vector<int>adj[],int u,int v){
    adj[u].push_back(v);

}
void caliD(vector<int>adj[],int indegree[],int V){
    for(int i=0;i<V;i++){
        for(int x : adj[i]){
            indegree[x]++;
        }
    }
    for(int i=0;i<V;i++){
        cout<<indegree[i]<<' ';
    }
    cout<<endl;
}
void toposort(vector<int>adj[],int indegree[],int V){
    queue<int>q;
    for(int i=0;i<V;i++){
        if(indegree[i]==0){
            q.push(i);
        }
    }
    while(!q.empty()){
        int u = q.front();
        q.pop();
        cout<<u<<' ';
        for(int v : adj[u]){
            indegree[v]--;
            if(indegree[v]==0){
                q.push(v);
            }
        }
    }
}
int main() {
    int V;
    cin>>V;
    int es;
    cin>>es;
    vector<int>adj[V];
    for(int i=0;i<es;i++){
        int u,v;
        cin>>u>>v;
        addedge(adj,u,v);

    }
    int indegree[V]={0};
    caliD(adj,indegree,V);
    int vis[V]={0};
    toposort(adj,indegree,V);


}
